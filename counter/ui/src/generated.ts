// Generated by @wagmi/cli@0.1.15 on 8/9/2023 at 12:37:25 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
  Address,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GlobalCounter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const globalCounterABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'count',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Increment',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nonces',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IncrementOnChainReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IncrementOnChainSuccess',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'chain', internalType: 'string', type: 'string' }],
    name: 'getCountFor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'chain', internalType: 'string', type: 'string' },
      { name: 'counter', internalType: 'address', type: 'address' },
    ],
    name: 'incrementOnChain',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'incrementSuccess',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_xtx',
        internalType: 'struct OmniCodec.Tx',
        type: 'tuple',
        components: [
          { name: 'sourceTxHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'sourceChain', internalType: 'string', type: 'string' },
          { name: 'destChain', internalType: 'string', type: 'string' },
          { name: 'nonce', internalType: 'uint64', type: 'uint64' },
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'paid', internalType: 'uint256', type: 'uint256' },
          { name: 'gasLimit', internalType: 'uint64', type: 'uint64' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_sender', internalType: 'address', type: 'address' },
      { name: '_gasSpent', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'onXChainTxReverted',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_xtx',
        internalType: 'struct OmniCodec.Tx',
        type: 'tuple',
        components: [
          { name: 'sourceTxHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'sourceChain', internalType: 'string', type: 'string' },
          { name: 'destChain', internalType: 'string', type: 'string' },
          { name: 'nonce', internalType: 'uint64', type: 'uint64' },
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'paid', internalType: 'uint256', type: 'uint256' },
          { name: 'gasLimit', internalType: 'uint64', type: 'uint64' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_sender', internalType: 'address', type: 'address' },
      { name: '_returnValue', internalType: 'bytes', type: 'bytes' },
      { name: '_gasSpent', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'onXChainTxSuccess',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LocalCounter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export const localCounterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_portal', internalType: 'contract OmniPortal', type: 'address' },
      { name: '_global', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'count',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Increment',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'countByChain',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'global',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globalBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'chain', internalType: 'string', type: 'string' },
      { name: 'counter', internalType: 'address', type: 'address' },
    ],
    name: 'incrementOnChain',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'omni',
    outputs: [
      { name: '', internalType: 'contract OmniPortal', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint64', type: 'uint64' },
      { name: '_storageProof', internalType: 'bytes', type: 'bytes' },
      { name: '_globalCount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'syncGlobalCount',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export const localCounterAddress = {
  420: '0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4',
  2730: '0x3b8f562222d5f8f0345772766fd35E58B0665413',
  3003: '0x3b8f562222d5f8f0345772766fd35E58B0665413',
  421613: '0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4',
} as const

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export const localCounterConfig = {
  address: localCounterAddress,
  abi: localCounterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OmniPortal
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export const omniPortalABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'block',
        internalType: 'struct OmniCodec.Block',
        type: 'tuple',
        components: [
          { name: 'sourceChain', internalType: 'string', type: 'string' },
          { name: 'parentHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'number', internalType: 'uint64', type: 'uint64' },
          {
            name: 'txs',
            internalType: 'struct OmniCodec.Tx[]',
            type: 'tuple[]',
            components: [
              {
                name: 'sourceTxHash',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceChain', internalType: 'string', type: 'string' },
              { name: 'destChain', internalType: 'string', type: 'string' },
              { name: 'nonce', internalType: 'uint64', type: 'uint64' },
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'paid', internalType: 'uint256', type: 'uint256' },
              { name: 'gasLimit', internalType: 'uint64', type: 'uint64' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: 'OmniBlockAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sourceTxHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'omniNonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'XChainTxResult',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_block',
        internalType: 'struct OmniCodec.Block',
        type: 'tuple',
        components: [
          { name: 'sourceChain', internalType: 'string', type: 'string' },
          { name: 'parentHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'number', internalType: 'uint64', type: 'uint64' },
          {
            name: 'txs',
            internalType: 'struct OmniCodec.Tx[]',
            type: 'tuple[]',
            components: [
              {
                name: 'sourceTxHash',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceChain', internalType: 'string', type: 'string' },
              { name: 'destChain', internalType: 'string', type: 'string' },
              { name: 'nonce', internalType: 'uint64', type: 'uint64' },
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'paid', internalType: 'uint256', type: 'uint256' },
              { name: 'gasLimit', internalType: 'uint64', type: 'uint64' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
      { name: 'signatures', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'addOmniBlock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_blocks',
        internalType: 'struct OmniCodec.Block[]',
        type: 'tuple[]',
        components: [
          { name: 'sourceChain', internalType: 'string', type: 'string' },
          { name: 'parentHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'number', internalType: 'uint64', type: 'uint64' },
          {
            name: 'txs',
            internalType: 'struct OmniCodec.Tx[]',
            type: 'tuple[]',
            components: [
              {
                name: 'sourceTxHash',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceChain', internalType: 'string', type: 'string' },
              { name: 'destChain', internalType: 'string', type: 'string' },
              { name: 'nonce', internalType: 'uint64', type: 'uint64' },
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'paid', internalType: 'uint256', type: 'uint256' },
              { name: 'gasLimit', internalType: 'uint64', type: 'uint64' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
      { name: 'signatures', internalType: 'bytes[][]', type: 'bytes[][]' },
    ],
    name: 'addOmniBlocks',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_chain', internalType: 'string', type: 'string' }],
    name: 'addSupportedChain',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'chain',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLatestOmniBlock',
    outputs: [
      {
        name: '',
        internalType: 'struct OmniCodec.Block',
        type: 'tuple',
        components: [
          { name: 'sourceChain', internalType: 'string', type: 'string' },
          { name: 'parentHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'number', internalType: 'uint64', type: 'uint64' },
          {
            name: 'txs',
            internalType: 'struct OmniCodec.Tx[]',
            type: 'tuple[]',
            components: [
              {
                name: 'sourceTxHash',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceChain', internalType: 'string', type: 'string' },
              { name: 'destChain', internalType: 'string', type: 'string' },
              { name: 'nonce', internalType: 'uint64', type: 'uint64' },
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'paid', internalType: 'uint256', type: 'uint256' },
              { name: 'gasLimit', internalType: 'uint64', type: 'uint64' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_chain', internalType: 'string', type: 'string' },
      { name: '_orchestrators', internalType: 'address[]', type: 'address[]' },
      { name: '_proofs', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOmniTx',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'isOrchestrator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestOmniBlock',
    outputs: [
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'parentHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'number', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    name: 'omniBlocks',
    outputs: [
      { name: 'sourceChain', internalType: 'string', type: 'string' },
      { name: 'parentHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'number', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'orchestrators',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proofs',
    outputs: [
      { name: '', internalType: 'contract OmniProofs', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_chain', internalType: 'string', type: 'string' }],
    name: 'removeSupportedChain',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'resetState',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_gasLimit', internalType: 'uint64', type: 'uint64' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'sendOmniTx',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_chain', internalType: 'string', type: 'string' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_gasLimit', internalType: 'uint64', type: 'uint64' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'sendXChainTx',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sender',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint64', type: 'uint64' },
      { name: '_storageProof', internalType: 'bytes', type: 'bytes' },
      { name: '_storageKey', internalType: 'bytes', type: 'bytes' },
      { name: '_storageValue', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyOmniState',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export const omniPortalAddress = {
  420: '0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d',
  2730: '0x7965Bb94fD6129B4Ac9028243BeFA0fACe1d7286',
  3003: '0x7965Bb94fD6129B4Ac9028243BeFA0fACe1d7286',
  421613: '0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d',
} as const

/**
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export const omniPortalConfig = {
  address: omniPortalAddress,
  abi: omniPortalABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link globalCounterABI}__.
 */
export function useGlobalCounter(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: globalCounterABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link globalCounterABI}__.
 */
export function useGlobalCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof globalCounterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof globalCounterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: globalCounterABI,
    ...config,
  } as UseContractReadConfig<
    typeof globalCounterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"count"`.
 */
export function useGlobalCounterCount<
  TSelectData = ReadContractResult<typeof globalCounterABI, 'count'>,
>(
  config: Omit<
    UseContractReadConfig<typeof globalCounterABI, 'count', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: globalCounterABI,
    functionName: 'count',
    ...config,
  } as UseContractReadConfig<typeof globalCounterABI, 'count', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"getCountFor"`.
 */
export function useGlobalCounterGetCountFor<
  TSelectData = ReadContractResult<typeof globalCounterABI, 'getCountFor'>,
>(
  config: Omit<
    UseContractReadConfig<typeof globalCounterABI, 'getCountFor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: globalCounterABI,
    functionName: 'getCountFor',
    ...config,
  } as UseContractReadConfig<
    typeof globalCounterABI,
    'getCountFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"incrementSuccess"`.
 */
export function useGlobalCounterIncrementSuccess<
  TSelectData = ReadContractResult<typeof globalCounterABI, 'incrementSuccess'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof globalCounterABI,
      'incrementSuccess',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: globalCounterABI,
    functionName: 'incrementSuccess',
    ...config,
  } as UseContractReadConfig<
    typeof globalCounterABI,
    'incrementSuccess',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link globalCounterABI}__.
 */
export function useGlobalCounterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof globalCounterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof globalCounterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof globalCounterABI, TFunctionName>({
    abi: globalCounterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"increment"`.
 */
export function useGlobalCounterIncrement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof globalCounterABI, 'increment'>['abi'],
        'increment'
      > & { functionName?: 'increment' }
    : UseContractWriteConfig<TMode, typeof globalCounterABI, 'increment'> & {
        abi?: never
        functionName?: 'increment'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof globalCounterABI, 'increment'>({
    abi: globalCounterABI,
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"incrementOnChain"`.
 */
export function useGlobalCounterIncrementOnChain<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof globalCounterABI,
          'incrementOnChain'
        >['abi'],
        'incrementOnChain'
      > & { functionName?: 'incrementOnChain' }
    : UseContractWriteConfig<
        TMode,
        typeof globalCounterABI,
        'incrementOnChain'
      > & {
        abi?: never
        functionName?: 'incrementOnChain'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof globalCounterABI, 'incrementOnChain'>({
    abi: globalCounterABI,
    functionName: 'incrementOnChain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"onXChainTxReverted"`.
 */
export function useGlobalCounterOnXChainTxReverted<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof globalCounterABI,
          'onXChainTxReverted'
        >['abi'],
        'onXChainTxReverted'
      > & { functionName?: 'onXChainTxReverted' }
    : UseContractWriteConfig<
        TMode,
        typeof globalCounterABI,
        'onXChainTxReverted'
      > & {
        abi?: never
        functionName?: 'onXChainTxReverted'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof globalCounterABI, 'onXChainTxReverted'>(
    {
      abi: globalCounterABI,
      functionName: 'onXChainTxReverted',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"onXChainTxSuccess"`.
 */
export function useGlobalCounterOnXChainTxSuccess<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof globalCounterABI,
          'onXChainTxSuccess'
        >['abi'],
        'onXChainTxSuccess'
      > & { functionName?: 'onXChainTxSuccess' }
    : UseContractWriteConfig<
        TMode,
        typeof globalCounterABI,
        'onXChainTxSuccess'
      > & {
        abi?: never
        functionName?: 'onXChainTxSuccess'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof globalCounterABI, 'onXChainTxSuccess'>({
    abi: globalCounterABI,
    functionName: 'onXChainTxSuccess',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link globalCounterABI}__.
 */
export function usePrepareGlobalCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof globalCounterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: globalCounterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof globalCounterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareGlobalCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof globalCounterABI, 'increment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: globalCounterABI,
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof globalCounterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"incrementOnChain"`.
 */
export function usePrepareGlobalCounterIncrementOnChain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof globalCounterABI, 'incrementOnChain'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: globalCounterABI,
    functionName: 'incrementOnChain',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof globalCounterABI,
    'incrementOnChain'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"onXChainTxReverted"`.
 */
export function usePrepareGlobalCounterOnXChainTxReverted(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof globalCounterABI,
      'onXChainTxReverted'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: globalCounterABI,
    functionName: 'onXChainTxReverted',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof globalCounterABI,
    'onXChainTxReverted'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link globalCounterABI}__ and `functionName` set to `"onXChainTxSuccess"`.
 */
export function usePrepareGlobalCounterOnXChainTxSuccess(
  config: Omit<
    UsePrepareContractWriteConfig<typeof globalCounterABI, 'onXChainTxSuccess'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: globalCounterABI,
    functionName: 'onXChainTxSuccess',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof globalCounterABI,
    'onXChainTxSuccess'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link globalCounterABI}__.
 */
export function useGlobalCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof globalCounterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: globalCounterABI,
    ...config,
  } as UseContractEventConfig<typeof globalCounterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link globalCounterABI}__ and `eventName` set to `"Increment"`.
 */
export function useGlobalCounterIncrementEvent(
  config: Omit<
    UseContractEventConfig<typeof globalCounterABI, 'Increment'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: globalCounterABI,
    eventName: 'Increment',
    ...config,
  } as UseContractEventConfig<typeof globalCounterABI, 'Increment'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link globalCounterABI}__ and `eventName` set to `"IncrementOnChainReverted"`.
 */
export function useGlobalCounterIncrementOnChainRevertedEvent(
  config: Omit<
    UseContractEventConfig<typeof globalCounterABI, 'IncrementOnChainReverted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: globalCounterABI,
    eventName: 'IncrementOnChainReverted',
    ...config,
  } as UseContractEventConfig<
    typeof globalCounterABI,
    'IncrementOnChainReverted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link globalCounterABI}__ and `eventName` set to `"IncrementOnChainSuccess"`.
 */
export function useGlobalCounterIncrementOnChainSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof globalCounterABI, 'IncrementOnChainSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: globalCounterABI,
    eventName: 'IncrementOnChainSuccess',
    ...config,
  } as UseContractEventConfig<
    typeof globalCounterABI,
    'IncrementOnChainSuccess'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link localCounterABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounter(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof localCounterAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContract({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link localCounterABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof localCounterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof localCounterABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    ...config,
  } as UseContractReadConfig<
    typeof localCounterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"count"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterCount<
  TSelectData = ReadContractResult<typeof localCounterABI, 'count'>,
>(
  config: Omit<
    UseContractReadConfig<typeof localCounterABI, 'count', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'count',
    ...config,
  } as UseContractReadConfig<typeof localCounterABI, 'count', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"countByChain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterCountByChain<
  TSelectData = ReadContractResult<typeof localCounterABI, 'countByChain'>,
>(
  config: Omit<
    UseContractReadConfig<typeof localCounterABI, 'countByChain', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'countByChain',
    ...config,
  } as UseContractReadConfig<
    typeof localCounterABI,
    'countByChain',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"global"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterGlobal<
  TSelectData = ReadContractResult<typeof localCounterABI, 'global'>,
>(
  config: Omit<
    UseContractReadConfig<typeof localCounterABI, 'global', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'global',
    ...config,
  } as UseContractReadConfig<typeof localCounterABI, 'global', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"globalBlockNumber"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterGlobalBlockNumber<
  TSelectData = ReadContractResult<typeof localCounterABI, 'globalBlockNumber'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof localCounterABI,
      'globalBlockNumber',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'globalBlockNumber',
    ...config,
  } as UseContractReadConfig<
    typeof localCounterABI,
    'globalBlockNumber',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"globalCount"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterGlobalCount<
  TSelectData = ReadContractResult<typeof localCounterABI, 'globalCount'>,
>(
  config: Omit<
    UseContractReadConfig<typeof localCounterABI, 'globalCount', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'globalCount',
    ...config,
  } as UseContractReadConfig<
    typeof localCounterABI,
    'globalCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"omni"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterOmni<
  TSelectData = ReadContractResult<typeof localCounterABI, 'omni'>,
>(
  config: Omit<
    UseContractReadConfig<typeof localCounterABI, 'omni', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'omni',
    ...config,
  } as UseContractReadConfig<typeof localCounterABI, 'omni', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link localCounterABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof localCounterAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof localCounterABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof localCounterABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof localCounterABI, TFunctionName>({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"increment"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterIncrement<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof localCounterAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof localCounterABI, 'increment'>['abi'],
        'increment'
      > & { address?: Address; chainId?: TChainId; functionName?: 'increment' }
    : UseContractWriteConfig<TMode, typeof localCounterABI, 'increment'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increment'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof localCounterABI, 'increment'>({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"incrementOnChain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterIncrementOnChain<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof localCounterAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof localCounterABI,
          'incrementOnChain'
        >['abi'],
        'incrementOnChain'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'incrementOnChain'
      }
    : UseContractWriteConfig<
        TMode,
        typeof localCounterABI,
        'incrementOnChain'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'incrementOnChain'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof localCounterABI, 'incrementOnChain'>({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'incrementOnChain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"syncGlobalCount"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterSyncGlobalCount<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof localCounterAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof localCounterABI,
          'syncGlobalCount'
        >['abi'],
        'syncGlobalCount'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'syncGlobalCount'
      }
    : UseContractWriteConfig<
        TMode,
        typeof localCounterABI,
        'syncGlobalCount'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'syncGlobalCount'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof localCounterABI, 'syncGlobalCount'>({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'syncGlobalCount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link localCounterABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function usePrepareLocalCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof localCounterABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof localCounterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"increment"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function usePrepareLocalCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof localCounterABI, 'increment'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof localCounterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"incrementOnChain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function usePrepareLocalCounterIncrementOnChain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof localCounterABI, 'incrementOnChain'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'incrementOnChain',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof localCounterABI,
    'incrementOnChain'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link localCounterABI}__ and `functionName` set to `"syncGlobalCount"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function usePrepareLocalCounterSyncGlobalCount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof localCounterABI, 'syncGlobalCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    functionName: 'syncGlobalCount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof localCounterABI, 'syncGlobalCount'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link localCounterABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof localCounterABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    ...config,
  } as UseContractEventConfig<typeof localCounterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link localCounterABI}__ and `eventName` set to `"Increment"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x96a9E320263F50166Bbd6c02e26Ff42bDF3f41E4)
 */
export function useLocalCounterIncrementEvent(
  config: Omit<
    UseContractEventConfig<typeof localCounterABI, 'Increment'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof localCounterAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: localCounterABI,
    address: localCounterAddress[chainId as keyof typeof localCounterAddress],
    eventName: 'Increment',
    ...config,
  } as UseContractEventConfig<typeof localCounterABI, 'Increment'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link omniPortalABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortal(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof omniPortalAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContract({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof omniPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"chain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalChain<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'chain'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'chain', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'chain',
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, 'chain', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"getLatestOmniBlock"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalGetLatestOmniBlock<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'getLatestOmniBlock'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof omniPortalABI,
      'getLatestOmniBlock',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'getLatestOmniBlock',
    ...config,
  } as UseContractReadConfig<
    typeof omniPortalABI,
    'getLatestOmniBlock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"isOmniTx"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalIsOmniTx<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'isOmniTx'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'isOmniTx', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'isOmniTx',
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, 'isOmniTx', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"isOrchestrator"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalIsOrchestrator<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'isOrchestrator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'isOrchestrator', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'isOrchestrator',
    ...config,
  } as UseContractReadConfig<
    typeof omniPortalABI,
    'isOrchestrator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"latestOmniBlock"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalLatestOmniBlock<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'latestOmniBlock'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'latestOmniBlock', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'latestOmniBlock',
    ...config,
  } as UseContractReadConfig<
    typeof omniPortalABI,
    'latestOmniBlock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"nonce"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalNonce<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'nonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'nonce', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, 'nonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"omniBlocks"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalOmniBlocks<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'omniBlocks'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'omniBlocks', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'omniBlocks',
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, 'omniBlocks', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"orchestrators"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalOrchestrators<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'orchestrators'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'orchestrators', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'orchestrators',
    ...config,
  } as UseContractReadConfig<
    typeof omniPortalABI,
    'orchestrators',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalOwner<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"proofs"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalProofs<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'proofs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'proofs', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'proofs',
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, 'proofs', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"sender"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalSender<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'sender'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'sender', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'sender',
    ...config,
  } as UseContractReadConfig<typeof omniPortalABI, 'sender', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"verifyOmniState"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalVerifyOmniState<
  TSelectData = ReadContractResult<typeof omniPortalABI, 'verifyOmniState'>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniPortalABI, 'verifyOmniState', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'verifyOmniState',
    ...config,
  } as UseContractReadConfig<
    typeof omniPortalABI,
    'verifyOmniState',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof omniPortalABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof omniPortalABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, TFunctionName>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"addOmniBlock"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalAddOmniBlock<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof omniPortalABI, 'addOmniBlock'>['abi'],
        'addOmniBlock'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addOmniBlock'
      }
    : UseContractWriteConfig<TMode, typeof omniPortalABI, 'addOmniBlock'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addOmniBlock'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'addOmniBlock'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'addOmniBlock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"addOmniBlocks"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalAddOmniBlocks<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof omniPortalABI,
          'addOmniBlocks'
        >['abi'],
        'addOmniBlocks'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addOmniBlocks'
      }
    : UseContractWriteConfig<TMode, typeof omniPortalABI, 'addOmniBlocks'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addOmniBlocks'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'addOmniBlocks'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'addOmniBlocks',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"addSupportedChain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalAddSupportedChain<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof omniPortalABI,
          'addSupportedChain'
        >['abi'],
        'addSupportedChain'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addSupportedChain'
      }
    : UseContractWriteConfig<
        TMode,
        typeof omniPortalABI,
        'addSupportedChain'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addSupportedChain'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'addSupportedChain'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'addSupportedChain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"initialize"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalInitialize<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof omniPortalABI, 'initialize'>['abi'],
        'initialize'
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof omniPortalABI, 'initialize'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'initialize'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"removeSupportedChain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalRemoveSupportedChain<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof omniPortalABI,
          'removeSupportedChain'
        >['abi'],
        'removeSupportedChain'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'removeSupportedChain'
      }
    : UseContractWriteConfig<
        TMode,
        typeof omniPortalABI,
        'removeSupportedChain'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'removeSupportedChain'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'removeSupportedChain'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'removeSupportedChain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalRenounceOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof omniPortalABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        TMode,
        typeof omniPortalABI,
        'renounceOwnership'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'renounceOwnership'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"resetState"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalResetState<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof omniPortalABI, 'resetState'>['abi'],
        'resetState'
      > & { address?: Address; chainId?: TChainId; functionName?: 'resetState' }
    : UseContractWriteConfig<TMode, typeof omniPortalABI, 'resetState'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'resetState'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'resetState'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'resetState',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"sendOmniTx"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalSendOmniTx<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof omniPortalABI, 'sendOmniTx'>['abi'],
        'sendOmniTx'
      > & { address?: Address; chainId?: TChainId; functionName?: 'sendOmniTx' }
    : UseContractWriteConfig<TMode, typeof omniPortalABI, 'sendOmniTx'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'sendOmniTx'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'sendOmniTx'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'sendOmniTx',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"sendXChainTx"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalSendXChainTx<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof omniPortalABI, 'sendXChainTx'>['abi'],
        'sendXChainTx'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'sendXChainTx'
      }
    : UseContractWriteConfig<TMode, typeof omniPortalABI, 'sendXChainTx'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'sendXChainTx'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'sendXChainTx'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'sendXChainTx',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof omniPortalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof omniPortalABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        TMode,
        typeof omniPortalABI,
        'transferOwnership'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<TMode, typeof omniPortalABI, 'transferOwnership'>({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"addOmniBlock"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalAddOmniBlock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'addOmniBlock'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'addOmniBlock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'addOmniBlock'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"addOmniBlocks"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalAddOmniBlocks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'addOmniBlocks'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'addOmniBlocks',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'addOmniBlocks'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"addSupportedChain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalAddSupportedChain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'addSupportedChain'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'addSupportedChain',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'addSupportedChain'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"initialize"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"removeSupportedChain"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalRemoveSupportedChain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'removeSupportedChain'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'removeSupportedChain',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniPortalABI,
    'removeSupportedChain'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"resetState"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalResetState(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'resetState'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'resetState',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'resetState'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"sendOmniTx"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalSendOmniTx(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'sendOmniTx'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'sendOmniTx',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'sendOmniTx'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"sendXChainTx"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalSendXChainTx(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'sendXChainTx'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'sendXChainTx',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'sendXChainTx'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniPortalABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function usePrepareOmniPortalTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniPortalABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniPortalABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniPortalABI}__.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof omniPortalABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    ...config,
  } as UseContractEventConfig<typeof omniPortalABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniPortalABI}__ and `eventName` set to `"Initialized"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof omniPortalABI, 'Initialized'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof omniPortalABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniPortalABI}__ and `eventName` set to `"OmniBlockAdded"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalOmniBlockAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof omniPortalABI, 'OmniBlockAdded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    eventName: 'OmniBlockAdded',
    ...config,
  } as UseContractEventConfig<typeof omniPortalABI, 'OmniBlockAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniPortalABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof omniPortalABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof omniPortalABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniPortalABI}__ and `eventName` set to `"TransactionDeposited"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalTransactionDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof omniPortalABI, 'TransactionDeposited'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    eventName: 'TransactionDeposited',
    ...config,
  } as UseContractEventConfig<typeof omniPortalABI, 'TransactionDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniPortalABI}__ and `eventName` set to `"XChainTxResult"`.
 *
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 * - [__View Contract on Arbitrum Goerli Arbiscan__](https://goerli.arbiscan.io//address/0x26FdfC1A37C4Ba9e73Df27DD67eC34852140B94d)
 */
export function useOmniPortalXChainTxResultEvent(
  config: Omit<
    UseContractEventConfig<typeof omniPortalABI, 'XChainTxResult'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof omniPortalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: omniPortalABI,
    address: omniPortalAddress[chainId as keyof typeof omniPortalAddress],
    eventName: 'XChainTxResult',
    ...config,
  } as UseContractEventConfig<typeof omniPortalABI, 'XChainTxResult'>)
}
